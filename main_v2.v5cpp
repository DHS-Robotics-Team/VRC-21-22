{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\nmotor leftMotorA = motor(PORT1, ratio18_1, false);\nmotor leftMotorB = motor(PORT2, ratio18_1, false);\nmotor_group LeftDriveSmart = motor_group(leftMotorA, leftMotorB);\nmotor rightMotorA = motor(PORT3, ratio18_1, true);\nmotor rightMotorB = motor(PORT4, ratio18_1, true);\nmotor_group RightDriveSmart = motor_group(rightMotorA, rightMotorB);\ngps DrivetrainGPS = gps(PORT13, 0.00, 0.00, mm, 180);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGPS, 319.19, 320, 40, mm, 1);\n\ncontroller Controller1 = controller(primary);\nmotor conveyor = motor(PORT6, ratio36_1, true);\n\nmotor Motor7 = motor(PORT7, ratio18_1, false);\n\n/*vex-vision-config:begin*/\nvision::signature Vision14__TAN_BOX = vision::signature (1, 1295, 2043, 1668,-2599, -1801, -2200,1.3, 0);\nvision::signature Vision14__SIG_2 = vision::signature (2, 7221, 9767, 8494,-1907, -377, -1142,3, 0);\nvision::signature Vision14__SIG_3 = vision::signature (3, -369, 633, 132,-1273, -119, -696,0, 0);\nvision::signature Vision14__SIG_4 = vision::signature (4, 0, 0, 0,0, 0, 0,3, 0);\nvision::signature Vision14__SIG_5 = vision::signature (5, 0, 0, 0,0, 0, 0,3, 0);\nvision::signature Vision14__SIG_6 = vision::signature (6, 0, 0, 0,0, 0, 0,3, 0);\nvision::signature Vision14__SIG_7 = vision::signature (7, 0, 0, 0,0, 0, 0,3, 0);\nvision Vision14 = vision (PORT14, 62, Vision14__TAN_BOX, Vision14__SIG_2, Vision14__SIG_3, Vision14__SIG_4, Vision14__SIG_5, Vision14__SIG_6, Vision14__SIG_7);\n/*vex-vision-config:end*/\nlimit LimitSwitchA = limit(Brain.ThreeWirePort.A);\nlimit LimitSwitchB = limit(Brain.ThreeWirePort.B);\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"GPS\");\n  DrivetrainGPS.calibrate();\n  while (DrivetrainGPS.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool Controller1RightShoulderControlMotorsStopped = true;\nbool DrivetrainNeedsToBeStopped_Controller1 = true;\n\n// define a task that will handle monitoring inputs from Controller1\nint rc_auto_loop_function_Controller1() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = Axis3 + Axis4\n      // right = Axis3 - Axis4\n      int drivetrainLeftSideSpeed = Controller1.Axis3.position() + Controller1.Axis4.position();\n      int drivetrainRightSideSpeed = Controller1.Axis3.position() - Controller1.Axis4.position();\n      \n      if(! Controller1.ButtonY.pressing()){\n        drivetrainLeftSideSpeed /= 3;\n        drivetrainRightSideSpeed /= 3;\n      }\n\n      // check if the values are inside of the deadband range\n      if (abs(drivetrainLeftSideSpeed) < 5 && abs(drivetrainRightSideSpeed) < 5) {\n        // check if the motors have already been stopped\n        if (DrivetrainNeedsToBeStopped_Controller1) {\n          // stop the drive motors\n          LeftDriveSmart.stop();\n          RightDriveSmart.stop();\n          // tell the code that the motors have been stopped\n          DrivetrainNeedsToBeStopped_Controller1 = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the motors next time the input is in the deadband range\n        DrivetrainNeedsToBeStopped_Controller1 = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainNeedsToBeStopped_Controller1) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonR1/ButtonR2 status to control conveyor\n      if (Controller1.ButtonR1.pressing()) {\n        conveyor.spin(forward);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (Controller1.ButtonR2.pressing()) {\n        conveyor.spin(reverse);\n        Controller1RightShoulderControlMotorsStopped = false;\n      } else if (!Controller1RightShoulderControlMotorsStopped) {\n        conveyor.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        Controller1RightShoulderControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller1(rc_auto_loop_function_Controller1);\n\n\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       Owen Miller and Sebastian Raz Guzman :)                                              */\n/*    Created:      5/21/2022                                                 */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n\nbool too_high = false;\nbool too_low = false;\nvoid fork_up() {\n  Motor7.setVelocity(50, percent);\n  if(! too_high){\n    Motor7.spin(reverse);\n  }\n}\n\nvoid fork_down(){\n  Motor7.setVelocity(50, percent);\n  if(! too_low){\n    Motor7.spin(forward);\n  }\n}\n\nvoid fork_up_manual(){\n  Motor7.setVelocity(30, percent);\n  // printf(\"up button pressed\");\n  if(! too_high){\n    // printf(\" and good to go\\n\");\n    Motor7.spin(reverse);\n    while(Controller1.ButtonL1.pressing()){\n      wait(.01, seconds);\n    }\n    Motor7.stop();\n  }else{\n    // printf(\"\\n\");\n  }\n}\nvoid fork_down_manual(){\n  Motor7.setVelocity(30, percent);\n  // printf(\"down button pressed\");\n  if(! too_low){\n    // printf(\" and good to go\\n\");\n    Motor7.spin(forward);\n    while(Controller1.ButtonL2.pressing()){\n      wait(.01, seconds);\n    }\n    Motor7.stop();\n  }else{\n    Motor7.stop();\n    // printf(\"\\n\");\n  }\n}\n\nvoid low_pressed(){\n  too_low = true;\n  Motor7.stop();\n  // printf(\"arm is too low\\n\");\n}\nvoid low_released(){\n  too_low = false;\n  // printf(\"arm is not too low\\n\");\n}\nvoid top_pressed(){\n  too_high = true;\n  Motor7.stop();\n  // printf(\"arm is too high\\n\");\n}\nvoid top_released(){\n  too_high = false;\n  // printf(\"arm is not too high\\n\");\n}\n\nint main() {\n  Drivetrain.setDriveVelocity(10, percent);\n  Drivetrain.driveFor(forward, 12, inches);\n  Drivetrain.driveFor(reverse, 12, inches);\n  Motor7.setStopping(brake);\n  \n  printf(\"debuggin code\\n\");\n  printf(\"Voltage: %f \\n\", Brain.Battery.voltage(volt));\n  Brain.Screen.print(\"VEXcode\");\n  Controller1.Screen.print(\"VEXcode\");\n\n  Controller1.ButtonA.pressed(fork_up);\n  Controller1.ButtonB.pressed(fork_down);\n  Controller1.ButtonL1.pressed(fork_up_manual);\n  Controller1.ButtonL2.pressed(fork_down_manual);\n  LimitSwitchA.pressed(low_pressed);\n  LimitSwitchA.released(low_released);\n  LimitSwitchB.pressed(top_pressed);\n  LimitSwitchB.released(top_released);\n\n  DrivetrainGPS.calibrate();\n  calibrateDrivetrain();\n  DrivetrainGPS.setOrigin(0, 0, mm);\n  DrivetrainGPS.setLocation(0, 0, mm, 0, degrees);\n\n  //printf(\"GPS quality: %f\\n\", DrivetrainGPS.quality());\n  while(true){\n    //printf(\"Rx: %f, Ax: %f, Ay: %f \\n\", DrivetrainGPS.xPosition(mm), DrivetrainGPS.acceleration(xaxis), DrivetrainGPS.acceleration(yaxis));\n    //printf(\"%f, %f \\n\", DrivetrainGPS.heading(), DrivetrainGPS.orientation(roll, degrees));\n    //printf(\"motor temp: %f \\n\", conveyor.temperature(percent));\n    /*if(LimitSwitchA.pressing()){\n      printf(\"a down\\n\");\n    }\n    if(LimitSwitchB.pressing()){\n      printf(\"b down\\n\");\n    }*/\n    wait(0.1, seconds);\n  }\n}\n","textLanguage":"cpp","rconfig":[{"port":[1,2,3,4,13],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"4-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"gps","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm","xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180"},"triportSourcePort":null},{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"conveyor","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"arcadel","id":"primary"},"triportSourcePort":22},{"port":[6],"name":"conveyor","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[7],"name":"Motor7","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[14],"name":"Vision14","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":62,\"signatures\":[{\"name\":\"TAN_BOX\",\"parameters\":{\"uMin\":1295,\"uMax\":2043,\"uMean\":1668,\"vMin\":-2599,\"vMax\":-1801,\"vMean\":-2200,\"rgb\":13086347,\"type\":0,\"name\":\"TAN_BOX\"},\"range\":1.3},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":7221,\"uMax\":9767,\"uMean\":8494,\"vMin\":-1907,\"vMax\":-377,\"vMean\":-1142,\"rgb\":9390140,\"type\":0,\"name\":\"SIG_2\"},\"range\":3},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":-369,\"uMax\":633,\"uMean\":132,\"vMin\":-1273,\"vMax\":-119,\"vMean\":-696,\"rgb\":8947582,\"type\":0,\"name\":\"SIG_3\"},\"range\":0},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":3},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":3},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":3},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":3}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1],"name":"LimitSwitchA","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"LimitSwitchB","customName":false,"deviceType":"LimitSwitch","deviceClass":"limit","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220215.18.00.00","appVersion":"2.3.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}